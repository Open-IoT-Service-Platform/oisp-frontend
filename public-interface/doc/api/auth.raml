#
# Copyright (c) 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

  displayName: <h2> Authorization </h2>
  description: |
    This part of the API handles authorization. The authorization is done based on JSON Web Tokens (JWT). The API can be used to get a JWT and retrieve information about it. The actuall access-role is included in the JWT and can be one of the following:
      * **anon** - anonymous, not authorized,
      * **device** - IoT Device
      * **user** - user of account(s)
      * **admin** - admin user of account(s)
      * **sysadmin** - admin with system wide rights
      * **system** - role of component doing system wide analytics
  /token:
    post:
      description: |
        Get the JWS for a user. The token is unique for every request.

        **Token expiration:**

        User JWT token is valid for 24h and contains user access information. On access change, token should be refreshed, to use new privileges. Example situation that require token refresh:

        * User creates new account - to use new account, token must be refreshed
        * User has been invited to new account - to have access to this account, token should be refreshed
        * User account role has been updated, for instance admin privileges were granted - to use new level of access, token must be refreshed

        <meta name="access-roles" path="POST:/auth/token">
      body:
        application/json:
          type: !include authorization_AUTH.json
          example: |
            {
              "username": "user@example.com",
              "password": "mypassword"
            }
      responses:
        200:
          body:
            application/json:
              example: |
                { "token": "eyJ0eXAi..." }

  /tokenInfo:
    get:
      description: |
        Get info about the JWT token

        <meta name="access-roles" path="GET:/auth/tokenInfo">
      is: [  authorization-header ]
      responses:
        200:
          body:
            application/json:
              example:
                {
                  "header": {
                    "typ": "JWT",
                    "alg": "RS256"
                  },
                  "payload": {
                    "jti": "7b1430a2-dd61-4a47-919c-495cadb1ea7b",
                    "iss": "http://streammyiot.com",
                    "sub": "53fdff4418b547e4241b8358",
                    "exp": "2014-10-02T07:53:25.361Z"
                  }
                }

  /me:
    get:
      description: |
        Get user information about the owner of the JWT token

        <meta name="access-roles" path="GET:/auth/me">
      is: [  authorization-header ]
      responses:
        200:
          body:
            application/json:
              example:
                {
                  "id": "5524fb12b57077f3012323c2",
                  "created": 1428487559131,
                  "email": "user@example.com",
                  "termsAndConditions": true,
                  "updated": 1428487559131,
                  "verified": true
                }

  /refresh:
    post:
      description: |
        Creates a new refresh token for the owner of the JWT token

        <meta name="access-roles" path="POST:/api/auth/refresh">
      is: [  authorization-header ]
      responses:
        200:
          body:
            application/json:
              example:
                {
                  "refreshToken" : "cxATGMQzKPTrtpUg"
                }
    put:
      description: |
        Gives a new JWT token and a refresh token for the owner of the JWT token. This can be used to refresh the jwt token.

        <meta name="access-roles" path="PUT:/api/auth/refresh">
      is: [  authorization-header ]
      body:
        application/json:
          example: |
            {
              "refreshToken": "zSbTGMQzKPTrtpUg",
            }
      responses:
        200:
          body:
            application/json:
              example:
                {
                  "jwt" : "eyJ0eXAi...",
                  "refreshToken" : "cxATGMQzKPTrtpUg"
                }

  /refresh/revoke:
    delete:
      description: |
        Revokes(deletes) the refresh token from use.

        <meta name="access-roles" path="DELETE:/api/auth/refresh/revoke">
      is: [ authorization-header ]
      body:
        application/json:
          example:
            {
              "refreshToken": "zSbTGMQzKPTrtpUg",
            }
      responses:
        200:
          body:
            application/json:
              example:
                {
                }
